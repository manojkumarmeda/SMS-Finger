using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SMSFinger.DAL
{
	/// <summary>
	/// Strongly-typed collection for the Message class.
	/// </summary>
    [Serializable]
	public partial class MessageCollection : ActiveList<Message, MessageCollection>
	{	   
		public MessageCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MessageCollection</returns>
		public MessageCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Message o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the message table.
	/// </summary>
	[Serializable]
	public partial class Message : ActiveRecord<Message>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Message()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Message(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Message(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Message(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("message", TableType.Table, DataService.GetInstance("SMSFingerProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSubject = new TableSchema.TableColumn(schema);
				colvarSubject.ColumnName = "subject";
				colvarSubject.DataType = DbType.String;
				colvarSubject.MaxLength = 200;
				colvarSubject.AutoIncrement = false;
				colvarSubject.IsNullable = true;
				colvarSubject.IsPrimaryKey = false;
				colvarSubject.IsForeignKey = false;
				colvarSubject.IsReadOnly = false;
				colvarSubject.DefaultSetting = @"";
				colvarSubject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubject);
				
				TableSchema.TableColumn colvarCreatorid = new TableSchema.TableColumn(schema);
				colvarCreatorid.ColumnName = "creatorid";
				colvarCreatorid.DataType = DbType.Int32;
				colvarCreatorid.MaxLength = 0;
				colvarCreatorid.AutoIncrement = false;
				colvarCreatorid.IsNullable = true;
				colvarCreatorid.IsPrimaryKey = false;
				colvarCreatorid.IsForeignKey = false;
				colvarCreatorid.IsReadOnly = false;
				colvarCreatorid.DefaultSetting = @"";
				colvarCreatorid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatorid);
				
				TableSchema.TableColumn colvarMessagebody = new TableSchema.TableColumn(schema);
				colvarMessagebody.ColumnName = "messagebody";
				colvarMessagebody.DataType = DbType.Binary;
				colvarMessagebody.MaxLength = 65535;
				colvarMessagebody.AutoIncrement = false;
				colvarMessagebody.IsNullable = true;
				colvarMessagebody.IsPrimaryKey = false;
				colvarMessagebody.IsForeignKey = false;
				colvarMessagebody.IsReadOnly = false;
				colvarMessagebody.DefaultSetting = @"";
				colvarMessagebody.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessagebody);
				
				TableSchema.TableColumn colvarDatecreated = new TableSchema.TableColumn(schema);
				colvarDatecreated.ColumnName = "datecreated";
				colvarDatecreated.DataType = DbType.DateTime;
				colvarDatecreated.MaxLength = 0;
				colvarDatecreated.AutoIncrement = false;
				colvarDatecreated.IsNullable = true;
				colvarDatecreated.IsPrimaryKey = false;
				colvarDatecreated.IsForeignKey = false;
				colvarDatecreated.IsReadOnly = false;
				colvarDatecreated.DefaultSetting = @"";
				colvarDatecreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDatecreated);
				
				TableSchema.TableColumn colvarParentmessageid = new TableSchema.TableColumn(schema);
				colvarParentmessageid.ColumnName = "parentmessageid";
				colvarParentmessageid.DataType = DbType.Int32;
				colvarParentmessageid.MaxLength = 0;
				colvarParentmessageid.AutoIncrement = false;
				colvarParentmessageid.IsNullable = true;
				colvarParentmessageid.IsPrimaryKey = false;
				colvarParentmessageid.IsForeignKey = false;
				colvarParentmessageid.IsReadOnly = false;
				colvarParentmessageid.DefaultSetting = @"";
				colvarParentmessageid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentmessageid);
				
				TableSchema.TableColumn colvarExpirydate = new TableSchema.TableColumn(schema);
				colvarExpirydate.ColumnName = "expirydate";
				colvarExpirydate.DataType = DbType.DateTime;
				colvarExpirydate.MaxLength = 0;
				colvarExpirydate.AutoIncrement = false;
				colvarExpirydate.IsNullable = true;
				colvarExpirydate.IsPrimaryKey = false;
				colvarExpirydate.IsForeignKey = false;
				colvarExpirydate.IsReadOnly = false;
				colvarExpirydate.DefaultSetting = @"";
				colvarExpirydate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpirydate);
				
				TableSchema.TableColumn colvarIsreminder = new TableSchema.TableColumn(schema);
				colvarIsreminder.ColumnName = "isreminder";
				colvarIsreminder.DataType = DbType.Int32;
				colvarIsreminder.MaxLength = 0;
				colvarIsreminder.AutoIncrement = false;
				colvarIsreminder.IsNullable = true;
				colvarIsreminder.IsPrimaryKey = false;
				colvarIsreminder.IsForeignKey = false;
				colvarIsreminder.IsReadOnly = false;
				colvarIsreminder.DefaultSetting = @"";
				colvarIsreminder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsreminder);
				
				TableSchema.TableColumn colvarNextreminddate = new TableSchema.TableColumn(schema);
				colvarNextreminddate.ColumnName = "nextreminddate";
				colvarNextreminddate.DataType = DbType.DateTime;
				colvarNextreminddate.MaxLength = 0;
				colvarNextreminddate.AutoIncrement = false;
				colvarNextreminddate.IsNullable = true;
				colvarNextreminddate.IsPrimaryKey = false;
				colvarNextreminddate.IsForeignKey = false;
				colvarNextreminddate.IsReadOnly = false;
				colvarNextreminddate.DefaultSetting = @"";
				colvarNextreminddate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNextreminddate);
				
				TableSchema.TableColumn colvarReminderfrequencyid = new TableSchema.TableColumn(schema);
				colvarReminderfrequencyid.ColumnName = "reminderfrequencyid";
				colvarReminderfrequencyid.DataType = DbType.Int32;
				colvarReminderfrequencyid.MaxLength = 0;
				colvarReminderfrequencyid.AutoIncrement = false;
				colvarReminderfrequencyid.IsNullable = true;
				colvarReminderfrequencyid.IsPrimaryKey = false;
				colvarReminderfrequencyid.IsForeignKey = false;
				colvarReminderfrequencyid.IsReadOnly = false;
				colvarReminderfrequencyid.DefaultSetting = @"";
				colvarReminderfrequencyid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReminderfrequencyid);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SMSFingerProvider"].AddSchema("message",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Subject")]
		[Bindable(true)]
		public string Subject 
		{
			get { return GetColumnValue<string>(Columns.Subject); }
			set { SetColumnValue(Columns.Subject, value); }
		}
		  
		[XmlAttribute("Creatorid")]
		[Bindable(true)]
		public int? Creatorid 
		{
			get { return GetColumnValue<int?>(Columns.Creatorid); }
			set { SetColumnValue(Columns.Creatorid, value); }
		}
		  
		[XmlAttribute("Messagebody")]
		[Bindable(true)]
		public byte[] Messagebody 
		{
			get { return GetColumnValue<byte[]>(Columns.Messagebody); }
			set { SetColumnValue(Columns.Messagebody, value); }
		}
		  
		[XmlAttribute("Datecreated")]
		[Bindable(true)]
		public DateTime? Datecreated 
		{
			get { return GetColumnValue<DateTime?>(Columns.Datecreated); }
			set { SetColumnValue(Columns.Datecreated, value); }
		}
		  
		[XmlAttribute("Parentmessageid")]
		[Bindable(true)]
		public int? Parentmessageid 
		{
			get { return GetColumnValue<int?>(Columns.Parentmessageid); }
			set { SetColumnValue(Columns.Parentmessageid, value); }
		}
		  
		[XmlAttribute("Expirydate")]
		[Bindable(true)]
		public DateTime? Expirydate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Expirydate); }
			set { SetColumnValue(Columns.Expirydate, value); }
		}
		  
		[XmlAttribute("Isreminder")]
		[Bindable(true)]
		public int? Isreminder 
		{
			get { return GetColumnValue<int?>(Columns.Isreminder); }
			set { SetColumnValue(Columns.Isreminder, value); }
		}
		  
		[XmlAttribute("Nextreminddate")]
		[Bindable(true)]
		public DateTime? Nextreminddate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Nextreminddate); }
			set { SetColumnValue(Columns.Nextreminddate, value); }
		}
		  
		[XmlAttribute("Reminderfrequencyid")]
		[Bindable(true)]
		public int? Reminderfrequencyid 
		{
			get { return GetColumnValue<int?>(Columns.Reminderfrequencyid); }
			set { SetColumnValue(Columns.Reminderfrequencyid, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSubject,int? varCreatorid,byte[] varMessagebody,DateTime? varDatecreated,int? varParentmessageid,DateTime? varExpirydate,int? varIsreminder,DateTime? varNextreminddate,int? varReminderfrequencyid)
		{
			Message item = new Message();
			
			item.Subject = varSubject;
			
			item.Creatorid = varCreatorid;
			
			item.Messagebody = varMessagebody;
			
			item.Datecreated = varDatecreated;
			
			item.Parentmessageid = varParentmessageid;
			
			item.Expirydate = varExpirydate;
			
			item.Isreminder = varIsreminder;
			
			item.Nextreminddate = varNextreminddate;
			
			item.Reminderfrequencyid = varReminderfrequencyid;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varSubject,int? varCreatorid,byte[] varMessagebody,DateTime? varDatecreated,int? varParentmessageid,DateTime? varExpirydate,int? varIsreminder,DateTime? varNextreminddate,int? varReminderfrequencyid)
		{
			Message item = new Message();
			
				item.Id = varId;
			
				item.Subject = varSubject;
			
				item.Creatorid = varCreatorid;
			
				item.Messagebody = varMessagebody;
			
				item.Datecreated = varDatecreated;
			
				item.Parentmessageid = varParentmessageid;
			
				item.Expirydate = varExpirydate;
			
				item.Isreminder = varIsreminder;
			
				item.Nextreminddate = varNextreminddate;
			
				item.Reminderfrequencyid = varReminderfrequencyid;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SubjectColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatoridColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MessagebodyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DatecreatedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentmessageidColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpirydateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsreminderColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NextreminddateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ReminderfrequencyidColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Subject = @"subject";
			 public static string Creatorid = @"creatorid";
			 public static string Messagebody = @"messagebody";
			 public static string Datecreated = @"datecreated";
			 public static string Parentmessageid = @"parentmessageid";
			 public static string Expirydate = @"expirydate";
			 public static string Isreminder = @"isreminder";
			 public static string Nextreminddate = @"nextreminddate";
			 public static string Reminderfrequencyid = @"reminderfrequencyid";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
